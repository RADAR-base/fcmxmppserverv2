apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'

group = 'org.radarcns'
version = '0.1.0-SNAPSHOT'

description = "RADAR FCM XMPP Server"

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

mainClassName = "com.wedevol.xmpp.EntryPoint"

ext.jCommanderVersion = '1.72'

repositories {
        
     maven { url "http://repo.maven.apache.org/maven2" }
}
dependencies {
    compile group: 'org.igniterealtime.smack', name: 'smack-java7', version:'4.2.4'
    compile group: 'org.igniterealtime.smack', name: 'smack-tcp', version:'4.2.4'
    compile group: 'org.igniterealtime.smack', name: 'smack-extensions', version:'4.2.4'
    compile group: 'ch.qos.logback', name: 'logback-classic', version:'1.2.3'
    compile group: 'com.github.kagkarlsson', name: 'db-scheduler', version:'3.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version:'2.9.6'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.9.6'
    compile group: 'com.beust', name: 'jcommander', version: jCommanderVersion
    compile group: 'org.hsqldb', name: 'hsqldb', version:'2.4.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.2.2'
    compile group: 'com.google.guava', name: 'guava', version: '23.0'

}

task run (type: JavaExec, dependsOn: classes, overwrite: true){
    if(project.hasProperty('appArgs')){
        args(appArgs.split(','))
    }
    description = "FCM XMPP App server"
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    dependsOn configurations.runtime
    manifest {
        attributes 'Implementation-Title': 'radar-fcmxmppserver',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    baseName = project.name + '-all'
    from {
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude 'META-INF/*'
    }
    with jar
}

artifacts {
    archives fatJar
}

distributions {
    main {
        contents {
            into ("share/${project.name}") {
                from 'README.md', 'LICENSE-2.0.txt'
            }
        }
    }
}

tasks.withType(Tar){
    compression = Compression.GZIP
    extension = 'tar.gz'
}

task downloadDependencies {
    description "Pre-downloads dependencies"
    configurations.compileClasspath.files
    configurations.runtimeClasspath.files
}

task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath.files
    into "${buildDir}/third-party/"
}

wrapper {
    gradleVersion '4.8'
}
